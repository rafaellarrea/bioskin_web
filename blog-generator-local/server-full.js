// server-full.js - Servidor completo con sistema de generaci√≥n de blogs funcional
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs-extra');
const multer = require('multer');
require('dotenv').config();

const app = express();
const PORT = 3333;

console.log(`
  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  ‚ïë        BIOSKIN BLOG GENERATOR          ‚ïë
  ‚ïë         SERVIDOR COMPLETO              ‚ïë
  ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
  ‚ïë  üåê Servidor: http://localhost:${PORT}     ‚ïë
  ‚ïë  üìù Generaci√≥n de blogs con IA         ‚ïë
  ‚ïë  üñºÔ∏è  Gesti√≥n de im√°genes               ‚ïë
  ‚ïë  üöÄ Despliegue autom√°tico              ‚ïë
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  
  Presiona Ctrl+C para detener el servidor
  `);

// Middlewares
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Configuraci√≥n de multer para subida de im√°genes
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadsDir = path.join(__dirname, 'public', 'uploads');
    fs.ensureDir(uploadsDir);
    cb(null, uploadsDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const extension = path.extname(file.originalname);
    cb(null, file.fieldname + '-' + uniqueSuffix + extension);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB l√≠mite
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Solo se permiten archivos de imagen'), false);
    }
  }
});

// Verificar directorios
const projectRoot = path.join(__dirname, '../');
const blogsDir = path.join(projectRoot, 'src/data/blogs');

fs.ensureDir(blogsDir).then(() => {
  console.log('üìÅ Directorios de blogs verificados');
}).catch(err => {
  console.error('‚ùå Error creando directorios:', err.message);
});

// RUTAS

// P√°gina principal
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Obtener sugerencias de temas
app.get('/api/topic-suggestions', (req, res) => {
  const suggestions = {
    'medico-estetico': [
      'Tratamientos de Rejuvenecimiento Facial No Invasivo',
      'Beneficios del √Åcido Hialur√≥nico en Medicina Est√©tica',
      'Tecnolog√≠a HIFU para Lifting Facial Sin Cirug√≠a',
      'Tratamientos de Manchas y Hiperpigmentaci√≥n',
      'Medicina Est√©tica Preventiva en J√≥venes',
      'Cuidados Post-Tratamiento en Medicina Est√©tica',
      'Bioestimuladores de Col√°geno: Gu√≠a Completa',
      'Tratamientos Faciales con L√°ser CO2',
      'Mesoterapia Facial: Beneficios y Aplicaciones',
      'Peeling Qu√≠mico vs Tratamientos L√°ser'
    ],
    'tecnico': [
      'Par√°metros T√©cnicos del L√°ser Nd:YAG en Depilaci√≥n',
      'Protocolo de Seguridad en Radiofrecuencia Facial',
      'Tecnolog√≠a IPL: An√°lisis de Espectros de Luz',
      'Calibraci√≥n de Equipos de Alta Frecuencia',
      'Sistemas de Refrigeraci√≥n en Equipos Est√©ticos',
      'An√°lisis Comparativo de Tecnolog√≠as LED',
      'Especificaciones T√©cnicas del Dermapen',
      'Protocolos de Mantenimiento de Equipos L√°ser',
      'Configuraci√≥n de Par√°metros en HIFU',
      'Sistemas de Control de Calidad en Equipos M√©dicos'
    ]
  };
  
  res.json({
    success: true,
    suggestions: suggestions
  });
});

// Sistema completo de generaci√≥n de blogs con IA
app.post('/api/generate-blog', async (req, res) => {
  try {
    const { 
      blogType = 'medico-estetico', 
      topic, 
      manual = false 
    } = req.body;

    if (!topic) {
      return res.status(400).json({
        success: false,
        message: 'El tema del blog es requerido'
      });
    }

    // Verificar OpenAI API Key
    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({
        success: false,
        message: 'OPENAI_API_KEY no configurada',
        error: 'Variable de entorno faltante'
      });
    }

    // Validar tipo de blog
    if (!['medico-estetico', 'tecnico'].includes(blogType)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Tipo de blog inv√°lido. Usar: medico-estetico o tecnico'
      });
    }

    const OpenAI = require('openai');
    
    // Configurar OpenAI
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });

    console.log(`ü§ñ Generando blog: "${topic}" (Tipo: ${blogType})`);

    // Prompts especializados (copiados del sistema de producci√≥n)
    const BLOG_PROMPTS = {
      'medico-estetico': {
        systemPrompt: `Eres un experto en medicina est√©tica que escribe blogs profesionales para BIOSKIN, una cl√≠nica especializada en tratamientos m√©dico-est√©ticos. 

INSTRUCCIONES ESPEC√çFICAS:
- Escribe en espa√±ol profesional y accesible
- Extensi√≥n: 800-1200 palabras exactas
- Incluye informaci√≥n m√©dica precisa y actualizada con datos t√©cnicos
- Menciona BIOSKIN como la cl√≠nica de referencia con tecnolog√≠a avanzada
- Estructura: M√∫ltiples secciones t√©cnicas detalladas con subsecciones
- Incluye llamada a la acci√≥n espec√≠fica al final`,
        
        userPrompt: (topic) => `Escribe un blog profesional sobre: "${topic}"

ESTRUCTURA REQUERIDA (SEGUIR EXACTAMENTE):
# [T√çTULO ATRACTIVO Y PROFESIONAL SOBRE EL TEMA]

[P√°rrafo de introducci√≥n explicando la importancia y relevancia del tratamiento]

## ¬øQu√© es [el tratamiento/tecnolog√≠a]?

[Explicaci√≥n t√©cnica accesible del procedimiento, incluyendo mecanismo de acci√≥n]

## Protocolo de Tratamiento BIOSKIN

### Evaluaci√≥n Inicial
[Proceso de evaluaci√≥n y selecci√≥n de candidatos]

### Sesiones Recomendadas
[N√∫mero de sesiones, intervalos, mantenimiento]

### Par√°metros T√©cnicos
[Especificaciones t√©cnicas del equipo/tratamiento]

## Beneficios y Ventajas

### Beneficios Cl√≠nicos
[Lista de beneficios m√©dicos comprobados]

### Tiempo de Recuperaci√≥n
[Cronograma detallado de recuperaci√≥n]

## Indicaciones y Contraindicaciones

### Candidatos Ideales
[Perfil del paciente ideal]

### Contraindicaciones
[Lista de contraindicaciones absolutas y relativas]

## Cuidados Post-Tratamiento

### Primeras 48 Horas
[Cuidados inmediatos]

### Primera Semana
[Cuidados durante la primera semana]

### Seguimiento
[Plan de seguimiento a largo plazo]

## Resultados Esperados

### Mejoras Graduales
[Timeline de resultados esperados]

### Porcentajes de Mejora
[Datos estad√≠sticos de eficacia]

## Tecnolog√≠a de Vanguardia en BIOSKIN

[Descripci√≥n de la tecnolog√≠a espec√≠fica utilizada en BIOSKIN]

## Conclusi√≥n

[Resumen profesional y llamada a la acci√≥n para agendar consulta]

IMPORTANTE: 
- Usa t√©rminos m√©dicos apropiados pero expl√≠calos
- Incluye datos espec√≠ficos y porcentajes cuando sea posible
- Mant√©n un tono profesional pero accesible
- Menciona BIOSKIN naturalmente en el contexto`
      },

      'tecnico': {
        systemPrompt: `Eres un ingeniero biom√©dico especialista en equipos de medicina est√©tica que escribe contenido t√©cnico para profesionales del sector.

INSTRUCCIONES ESPEC√çFICAS:
- Escribe en espa√±ol t√©cnico profesional
- Extensi√≥n: 1000-1400 palabras exactas
- Incluye especificaciones t√©cnicas detalladas y precisas
- Enfoque en par√°metros, protocolos y funcionamiento
- Estructura: Secciones t√©cnicas con datos cuantitativos
- Dirigido a m√©dicos y t√©cnicos especializados`,

        userPrompt: (topic) => `Escribe un art√≠culo t√©cnico profesional sobre: "${topic}"

ESTRUCTURA T√âCNICA REQUERIDA:
# [T√çTULO T√âCNICO ESPEC√çFICO]

[Introducci√≥n t√©cnica con contexto cient√≠fico]

## Fundamentos Tecnol√≥gicos

### Principios F√≠sicos
[Base cient√≠fica y f√≠sica del funcionamiento]

### Especificaciones T√©cnicas
[Par√°metros t√©cnicos detallados]

## Par√°metros de Configuraci√≥n

### Configuraci√≥n B√°sica
[Par√°metros est√°ndar]

### Configuraci√≥n Avanzada
[Par√°metros para casos espec√≠ficos]

### Protocolos de Calibraci√≥n
[Procedimientos de calibraci√≥n]

## Aplicaciones Cl√≠nicas

### Indicaciones T√©cnicas
[Aplicaciones espec√≠ficas con par√°metros]

### Protocolos de Tratamiento
[Procedimientos t√©cnicos paso a paso]

## Seguridad y Mantenimiento

### Sistemas de Seguridad
[Mecanismos de seguridad integrados]

### Mantenimiento Preventivo
[Rutinas de mantenimiento]

### Soluci√≥n de Problemas
[Gu√≠a de troubleshooting t√©cnico]

## An√°lisis de Rendimiento

### Eficacia Medida
[Datos de rendimiento cuantitativos]

### Comparativas T√©cnicas
[Comparaci√≥n con otros equipos]

## Innovaciones Tecnol√≥gicas

### √öltimos Desarrollos
[Avances tecnol√≥gicos recientes]

### Perspectivas Futuras
[Tendencias tecnol√≥gicas]

## Conclusiones T√©cnicas

[Resumen t√©cnico y recomendaciones profesionales]

REQUERIMIENTOS T√âCNICOS:
- Incluye valores num√©ricos espec√≠ficos
- Usa terminolog√≠a t√©cnica apropiada
- Proporciona datos cuantitativos
- Mant√©n precisi√≥n cient√≠fica
- Incluye referencias a est√°ndares cuando corresponda`
      }
    };

    const selectedPrompt = BLOG_PROMPTS[blogType];

    // Generar contenido con OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { 
          role: "system", 
          content: selectedPrompt.systemPrompt 
        },
        { 
          role: "user", 
          content: selectedPrompt.userPrompt(topic) 
        }
      ],
      max_tokens: 3000,
      temperature: 0.7
    });

    const content = completion.choices[0].message.content;

    // Procesar el contenido generado
    const title = extractTitle(content);
    const slug = generateSlug(title);
    const excerpt = generateExcerpt(content);
    const tags = generateTags(content, blogType);

    // Crear estructura del blog
    const blogData = {
      id: `blog-${Date.now()}`,
      title: title,
      slug: slug,
      excerpt: excerpt,
      content: content,
      category: blogType,
      author: blogType === 'tecnico' ? 'BIOSKIN T√©cnico' : 'BIOSKIN M√©dico',
      publishedAt: new Date().toISOString(),
      readTime: Math.ceil(content.length / 1000), // Aproximado
      tags: tags,
      image: '', // Se a√±adir√° en el editor
      imagenPrincipal: '',
      imagenConclusion: '',
      featured: false,
      source: 'ai-generated-local'
    };

    console.log(`‚úÖ Blog generado exitosamente: "${title}"`);

    res.json({
      success: true,
      blog: blogData,
      message: 'Blog generado exitosamente',
      stats: {
        words: content.split(' ').length,
        readTime: blogData.readTime,
        category: blogType
      }
    });

  } catch (error) {
    console.error('‚ùå Error generando blog:', error);

    let errorMessage = 'Error generando el blog';
    
    // Manejar errores espec√≠ficos de OpenAI
    if (error.message.includes('API key')) {
      errorMessage = 'Error con la API key de OpenAI. Verifica que sea v√°lida.';
    } else if (error.message.includes('quota')) {
      errorMessage = 'L√≠mite de uso de OpenAI excedido. Verifica tu plan.';
    } else if (error.message.includes('network')) {
      errorMessage = 'Error de conexi√≥n. Verifica tu conexi√≥n a internet.';
    }

    res.status(500).json({
      success: false,
      message: errorMessage,
      error: error.message,
      details: {
        type: error.constructor.name,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      }
    });
  }
});

// Funciones auxiliares (copiadas del sistema de producci√≥n)
function extractTitle(content) {
  const match = content.match(/^#\s+(.+)$/m);
  return match ? match[1].trim() : 'Blog Sin T√≠tulo';
}

function generateSlug(title) {
  return title
    .toLowerCase()
    .replace(/[√°√†√§√¢]/g, 'a')
    .replace(/[√©√®√´√™]/g, 'e')
    .replace(/[√≠√¨√Ø√Æ]/g, 'i')
    .replace(/[√≥√≤√∂√¥]/g, 'o')
    .replace(/[√∫√π√º√ª]/g, 'u')
    .replace(/√±/g, 'n')
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

function generateExcerpt(content, maxLength = 150) {
  // Remover markdown y obtener primer p√°rrafo
  const plainText = content
    .replace(/^#.*$/gm, '')
    .replace(/\*\*(.+?)\*\*/g, '$1')
    .replace(/\*(.+?)\*/g, '$1')
    .replace(/\[(.+?)\]\(.+?\)/g, '$1')
    .replace(/`(.+?)`/g, '$1')
    .trim();

  const firstParagraph = plainText.split('\n\n')[0] || plainText.split('\n')[0] || '';
  
  if (firstParagraph.length <= maxLength) {
    return firstParagraph;
  }
  
  return firstParagraph.substring(0, maxLength).trim() + '...';
}

function generateTags(content, category) {
  const baseTags = category === 'tecnico' 
    ? ['tecnolog√≠a', 'equipos m√©dicos', 'par√°metros t√©cnicos', 'BIOSKIN']
    : ['medicina est√©tica', 'tratamientos', 'BIOSKIN', 'rejuvenecimiento'];

  // Extraer palabras clave del contenido
  const keywordPatterns = [
    /\b(l√°ser|laser)\b/gi,
    /\b(IPL|luz pulsada)\b/gi,
    /\bHIFU\b/gi,
    /\bradiofrecuencia\b/gi,
    /\b(√°cido hialur√≥nico|hialur√≥nico)\b/gi,
    /\b(col√°geno|colageno)\b/gi,
    /\b(botox|toxina botul√≠nica)\b/gi,
    /\b(peeling|exfoliaci√≥n)\b/gi,
    /\b(mesoterapia)\b/gi,
    /\b(bioestimulador|bioestimuladores)\b/gi
  ];

  const foundKeywords = [];
  keywordPatterns.forEach(pattern => {
    const match = content.match(pattern);
    if (match) {
      foundKeywords.push(match[0].toLowerCase());
    }
  });

  return [...baseTags, ...foundKeywords].slice(0, 8);
}

// Resto de endpoints (guardar blog, desplegar, etc.) - simplificados
app.post('/api/save-blog', async (req, res) => {
  try {
    const { blogData } = req.body;
    
    if (!blogData || !blogData.slug) {
      return res.status(400).json({
        success: false,
        message: 'Datos del blog inv√°lidos'
      });
    }

    const filename = `${blogData.slug}.json`;
    const filePath = path.join(blogsDir, filename);

    // A√±adir metadatos de guardado local
    const finalBlogData = {
      ...blogData,
      savedAt: new Date().toISOString(),
      source: 'local-generator'
    };

    // Guardar archivo
    await fs.writeFile(filePath, JSON.stringify(finalBlogData, null, 2), 'utf8');

    console.log(`üíæ Blog guardado: ${filename}`);

    res.json({
      success: true,
      message: 'Blog guardado exitosamente',
      slug: blogData.slug,
      path: filePath
    });

  } catch (error) {
    console.error('‚ùå Error guardando blog:', error);
    res.status(500).json({
      success: false,
      message: 'Error guardando el blog',
      error: error.message
    });
  }
});

// Desplegar blog con Git
app.post('/api/deploy-blog', async (req, res) => {
  try {
    const { blogSlug, commitMessage } = req.body;
    
    if (!blogSlug) {
      return res.status(400).json({
        success: false,
        message: 'El slug del blog es requerido'
      });
    }

    // Verificar que el archivo existe
    const blogPath = path.join(blogsDir, `${blogSlug}.json`);
    const exists = await fs.pathExists(blogPath);
    
    if (!exists) {
      return res.status(404).json({
        success: false,
        message: 'El blog no existe'
      });
    }

    const simpleGit = require('simple-git');
    const git = simpleGit(projectRoot);

    // A√±adir archivo
    const relativePath = path.relative(projectRoot, blogPath);
    await git.add(relativePath);

    // Commit
    const message = commitMessage || `üìù Nuevo blog generado localmente: ${blogSlug}`;
    const commitResult = await git.commit(message);

    // Push
    await git.push('origin', 'main');

    console.log(`üöÄ Blog desplegado: ${blogSlug}`);

    res.json({
      success: true,
      message: 'Blog desplegado exitosamente',
      details: {
        slug: blogSlug,
        commit: commitResult.commit,
        commitMessage: message
      }
    });

  } catch (error) {
    console.error('‚ùå Error desplegando blog:', error);
    res.status(500).json({
      success: false,
      message: 'Error desplegando el blog',
      error: error.message
    });
  }
});

// Endpoints adicionales
app.get('/api/saved-blogs', async (req, res) => {
  try {
    const blogs = [];
    
    if (await fs.pathExists(blogsDir)) {
      const files = await fs.readdir(blogsDir);
      
      for (const file of files) {
        if (file.endsWith('.json')) {
          try {
            const filePath = path.join(blogsDir, file);
            const content = await fs.readFile(filePath, 'utf8');
            const blogData = JSON.parse(content);
            blogs.push(blogData);
          } catch (err) {
            console.warn(`‚ö†Ô∏è  Error leyendo ${file}:`, err.message);
          }
        }
      }
    }

    blogs.sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));

    res.json({
      success: true,
      blogs: blogs
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo blogs:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo la lista de blogs',
      error: error.message
    });
  }
});

// Endpoint para subir im√°genes - CORREGIDO
app.post('/api/upload-image', (req, res) => {
  console.log('üì® Petici√≥n recibida en /api/upload-image');
  
  upload.single('image')(req, res, (err) => {
    if (err) {
      console.error('‚ùå Error de multer:', err);
      return res.status(400).json({
        success: false,
        message: 'Error procesando el archivo',
        error: err.message
      });
    }

    try {
      if (!req.file) {
        console.log('‚ö†Ô∏è No se recibi√≥ ning√∫n archivo');
        return res.status(400).json({
          success: false,
          message: 'No se subi√≥ ning√∫n archivo'
        });
      }

      const filename = req.file.filename;
      const imageUrl = `/uploads/${filename}`;

      console.log(`üñºÔ∏è Imagen subida exitosamente: ${filename}`);
      console.log(`üìÇ Ruta del archivo: ${req.file.path}`);
      console.log(`üîó URL de la imagen: ${imageUrl}`);

      res.json({
        success: true,
        message: 'Imagen subida correctamente',
        imageUrl: imageUrl,
        filename: filename
      });

    } catch (error) {
      console.error('‚ùå Error procesando imagen:', error);
      res.status(500).json({
        success: false,
        message: 'Error procesando la imagen',
        error: error.message
      });
    }
  });
});

// Endpoint de validaci√≥n de API key
app.get('/api/validate-api-key', async (req, res) => {
  try {
    if (!process.env.OPENAI_API_KEY) {
      return res.json({
        valid: false,
        message: 'API key no configurada'
      });
    }

    const OpenAI = require('openai');
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });

    // Hacer una llamada simple para validar
    await openai.models.list();

    res.json({
      valid: true,
      message: 'API key v√°lida y funcional'
    });

  } catch (error) {
    res.json({
      valid: false,
      message: 'API key inv√°lida o error de conexi√≥n',
      error: error.message
    });
  }
});

// Manejo de errores
app.use((error, req, res, next) => {
  console.error('Error del servidor:', error);
  res.status(500).json({
    success: false,
    message: 'Error interno del servidor',
    error: error.message
  });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`‚úÖ Servidor iniciado correctamente en puerto ${PORT}`);
  console.log(`üîë OpenAI configurado: ${process.env.OPENAI_API_KEY ? 'S√ç ‚úÖ' : 'NO ‚ùå'}`);
  console.log(`üìÅ Directorio blogs: ${blogsDir}`);
  
  // Validar API key al iniciar
  if (process.env.OPENAI_API_KEY) {
    console.log(`üîê API key v√°lida: ${process.env.OPENAI_API_KEY.substring(0, 20)}...`);
  }
});

module.exports = app;