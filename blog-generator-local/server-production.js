// server-production.js - Servidor con sistema de generaci√≥n de producci√≥n
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs-extra');
const simpleGit = require('simple-git');
const OpenAI = require('openai');
const multer = require('multer');
require('dotenv').config();

const app = express();
const PORT = 3336;

console.log(`
  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  ‚ïë        BIOSKIN BLOG GENERATOR          ‚ïë
  ‚ïë          VERSI√ìN PRODUCCI√ìN            ‚ïë
  ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
  ‚ïë  üåê Servidor: http://localhost:${PORT}     ‚ïë
  ‚ïë  üìù Generaci√≥n completa con IA         ‚ïë
  ‚ïë  üñºÔ∏è  Gesti√≥n de im√°genes               ‚ïë
  ‚ïë  üöÄ Despliegue autom√°tico              ‚ïë
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  
  Presiona Ctrl+C para detener el servidor
  `);

// Middlewares
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Configuraci√≥n de multer para subida de im√°genes organizadas por blog
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    console.log('üîç Determinando destino para subida de imagen...');
    console.log('üìã req.body:', req.body);
    
    // Obtener el slug del blog desde el formulario
    const blogSlug = req.body.blogSlug || 'temporal';
    console.log(`üìÇ Slug detectado: ${blogSlug}`);
    
    const blogImagesDir = path.join(projectRoot, 'public', 'images', 'blog', blogSlug);
    console.log(`üìÅ Directorio de destino: ${blogImagesDir}`);
    
    // Crear directorio de forma s√≠ncrona para multer
    fs.ensureDirSync(blogImagesDir);
    console.log(`‚úÖ Directorio creado/verificado: ${blogImagesDir}`);
    
    cb(null, blogImagesDir);
  },
  filename: function (req, file, cb) {
    const timestamp = Date.now();
    const extension = path.extname(file.originalname);
    const originalName = path.basename(file.originalname, extension);
    const safeFilename = originalName.toLowerCase()
      .replace(/[^a-z0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
    const finalFilename = `${safeFilename}-${timestamp}${extension}`;
    console.log(`üì∑ Nombre de archivo generado: ${finalFilename}`);
    cb(null, finalFilename);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB l√≠mite
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Solo se permiten archivos de imagen'), false);
    }
  }
});

// Verificar directorios y configuraci√≥n
const projectRoot = path.join(__dirname, '../');
const blogsDir = path.join(projectRoot, 'src/data/blogs');

fs.ensureDir(blogsDir).then(() => {
  console.log('üìÅ Directorios de blogs verificados');
}).catch(err => {
  console.error('‚ùå Error creando directorios:', err.message);
});

// Verificar OpenAI API Key
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå OPENAI_API_KEY no configurada');
  console.log('‚ö†Ô∏è  Por favor, configura tu API key en el archivo .env');
} else {
  console.log('‚úÖ OpenAI API Key configurada');
}

// Configurar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// SISTEMA DE GENERACI√ìN COMPLETO (copiado de producci√≥n)
const BLOG_PROMPTS = {
  'medico-estetico': {
    systemPrompt: `Eres un experto en medicina est√©tica que escribe blogs profesionales para BIOSKIN, una cl√≠nica especializada en tratamientos m√©dico-est√©ticos. 

INSTRUCCIONES ESPEC√çFICAS:
- Escribe en espa√±ol profesional y accesible
- Extensi√≥n: 800-1200 palabras exactas
- Incluye informaci√≥n m√©dica precisa y actualizada con datos t√©cnicos
- Menciona BIOSKIN como la cl√≠nica de referencia con tecnolog√≠a avanzada
- Estructura: M√∫ltiples secciones t√©cnicas detalladas con subsecciones
- Incluye llamada a la acci√≥n espec√≠fica al final`,
    
    userPrompt: (topic) => `Escribe un blog profesional sobre: "${topic}"

ESTRUCTURA REQUERIDA (SEGUIR EXACTAMENTE):
# [T√çTULO ATRACTIVO Y PROFESIONAL SOBRE EL TEMA]

[P√°rrafo de introducci√≥n explicando la importancia y relevancia del tratamiento]

## ¬øQu√© es [el tratamiento/tecnolog√≠a]?

[Explicaci√≥n t√©cnica accesible del procedimiento, incluyendo mecanismo de acci√≥n]

## Protocolo de Tratamiento BIOSKIN

### Evaluaci√≥n Inicial
[Proceso de evaluaci√≥n y selecci√≥n de candidatos]

### Sesiones Recomendadas
[N√∫mero de sesiones, intervalos, mantenimiento]

### Par√°metros T√©cnicos
[Especificaciones t√©cnicas del equipo/tratamiento]

## Beneficios y Ventajas

### Beneficios Cl√≠nicos
[Lista de beneficios m√©dicos comprobados]

### Tiempo de Recuperaci√≥n
[Cronograma detallado de recuperaci√≥n]

## Indicaciones y Contraindicaciones

### Candidatos Ideales
[Perfil del paciente ideal]

### Contraindicaciones
[Lista de contraindicaciones absolutas y relativas]

## Cuidados Post-Tratamiento

### Primeras 48 Horas
[Cuidados inmediatos]

### Primera Semana
[Cuidados durante la primera semana]

### Seguimiento
[Plan de seguimiento a largo plazo]

## Resultados Esperados

### Mejoras Graduales
[Timeline de resultados esperados]

### Porcentajes de Mejora
[Datos estad√≠sticos de eficacia]

## Tecnolog√≠a de Vanguardia en BIOSKIN

[Descripci√≥n de la tecnolog√≠a espec√≠fica utilizada en BIOSKIN]

## Conclusi√≥n

[Resumen profesional y llamada a la acci√≥n para agendar consulta]

IMPORTANTE: 
- Usa t√©rminos m√©dicos apropiados pero expl√≠calos
- Incluye datos espec√≠ficos y porcentajes cuando sea posible
- Mant√©n un tono profesional pero accesible
- Menciona BIOSKIN naturalmente en el contexto`
  },

  'tecnico': {
    systemPrompt: `Eres un ingeniero biom√©dico especialista en equipos de medicina est√©tica que escribe contenido t√©cnico para profesionales del sector.

INSTRUCCIONES ESPEC√çFICAS:
- Escribe en espa√±ol t√©cnico profesional
- Extensi√≥n: 1000-1400 palabras exactas
- Incluye especificaciones t√©cnicas detalladas y precisas
- Enfoque en par√°metros, protocolos y funcionamiento
- Estructura: Secciones t√©cnicas con datos cuantitativos
- Dirigido a m√©dicos y t√©cnicos especializados`,

    userPrompt: (topic) => `Escribe un art√≠culo t√©cnico profesional sobre: "${topic}"

ESTRUCTURA T√âCNICA REQUERIDA:
# [T√çTULO T√âCNICO ESPEC√çFICO]

[Introducci√≥n t√©cnica con contexto cient√≠fico]

## Fundamentos Tecnol√≥gicos

### Principios F√≠sicos
[Base cient√≠fica y f√≠sica del funcionamiento]

### Especificaciones T√©cnicas
[Par√°metros t√©cnicos detallados]

## Par√°metros de Configuraci√≥n

### Configuraci√≥n B√°sica
[Par√°metros est√°ndar]

### Configuraci√≥n Avanzada
[Par√°metros para casos espec√≠ficos]

### Protocolos de Calibraci√≥n
[Procedimientos de calibraci√≥n]

## Aplicaciones Cl√≠nicas

### Indicaciones T√©cnicas
[Aplicaciones espec√≠ficas con par√°metros]

### Protocolos de Tratamiento
[Procedimientos t√©cnicos paso a paso]

## Seguridad y Mantenimiento

### Sistemas de Seguridad
[Mecanismos de seguridad integrados]

### Mantenimiento Preventivo
[Rutinas de mantenimiento]

### Soluci√≥n de Problemas
[Gu√≠a de troubleshooting t√©cnico]

## An√°lisis de Rendimiento

### Eficacia Medida
[Datos de rendimiento cuantitativos]

### Comparativas T√©cnicas
[Comparaci√≥n con otros equipos]

## Innovaciones Tecnol√≥gicas

### √öltimos Desarrollos
[Avances tecnol√≥gicos recientes]

### Perspectivas Futuras
[Tendencias tecnol√≥gicas]

## Conclusiones T√©cnicas

[Resumen t√©cnico y recomendaciones profesionales]

REQUERIMIENTOS T√âCNICOS:
- Incluye valores num√©ricos espec√≠ficos
- Usa terminolog√≠a t√©cnica apropiada
- Proporciona datos cuantitativos
- Mant√©n precisi√≥n cient√≠fica
- Incluye referencias a est√°ndares cuando corresponda`
  }
};

// Funciones auxiliares
function generateSlug(title) {
  return title
    .toLowerCase()
    .replace(/[√°√†√§√¢]/g, 'a')
    .replace(/[√©√®√´√™]/g, 'e')
    .replace(/[√≠√¨√Ø√Æ]/g, 'i')
    .replace(/[√≥√≤√∂√¥]/g, 'o')
    .replace(/[√∫√π√º√ª]/g, 'u')
    .replace(/√±/g, 'n')
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

function extractTitle(content) {
  const match = content.match(/^#\s+(.+)$/m);
  return match ? match[1].trim() : 'Blog Sin T√≠tulo';
}

function generateExcerpt(content, maxLength = 150) {
  const plainText = content
    .replace(/^#.*$/gm, '')
    .replace(/\*\*(.+?)\*\*/g, '$1')
    .replace(/\*(.+?)\*/g, '$1')
    .replace(/\[(.+?)\]\(.+?\)/g, '$1')
    .replace(/`(.+?)`/g, '$1')
    .trim();

  const firstParagraph = plainText.split('\n\n')[0] || plainText.split('\n')[0] || '';
  
  if (firstParagraph.length <= maxLength) {
    return firstParagraph;
  }
  
  return firstParagraph.substring(0, maxLength).trim() + '...';
}

function generateTags(content, category) {
  const baseTags = category === 'tecnico' 
    ? ['tecnolog√≠a', 'equipos m√©dicos', 'par√°metros t√©cnicos', 'BIOSKIN']
    : ['medicina est√©tica', 'tratamientos', 'BIOSKIN', 'rejuvenecimiento'];

  // Extraer palabras clave del contenido
  const keywordPatterns = [
    /\b(l√°ser|laser)\b/gi,
    /\b(IPL|luz pulsada)\b/gi,
    /\bHIFU\b/gi,
    /\bradiofrecuencia\b/gi,
    /\b(√°cido hialur√≥nico|hialur√≥nico)\b/gi,
    /\b(col√°geno|colageno)\b/gi,
    /\b(botox|toxina botul√≠nica)\b/gi,
    /\b(peeling|exfoliaci√≥n)\b/gi,
    /\b(mesoterapia)\b/gi,
    /\b(bioestimulador|bioestimuladores)\b/gi
  ];

  const foundKeywords = [];
  keywordPatterns.forEach(pattern => {
    const match = content.match(pattern);
    if (match) {
      foundKeywords.push(match[0].toLowerCase());
    }
  });

  return [...baseTags, ...foundKeywords].slice(0, 8);
}

// RUTAS

// P√°gina principal
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Obtener sugerencias de temas
app.get('/api/topic-suggestions', (req, res) => {
  const suggestions = {
    'medico-estetico': [
      'Tratamientos de Rejuvenecimiento Facial No Invasivo',
      'Beneficios del √Åcido Hialur√≥nico en Medicina Est√©tica',
      'Tecnolog√≠a HIFU para Lifting Facial Sin Cirug√≠a',
      'Tratamientos de Manchas y Hiperpigmentaci√≥n',
      'Medicina Est√©tica Preventiva en J√≥venes',
      'Cuidados Post-Tratamiento en Medicina Est√©tica',
      'Bioestimuladores de Col√°geno: Gu√≠a Completa',
      'Tratamientos Faciales con L√°ser CO2',
      'Mesoterapia Facial: Beneficios y Aplicaciones',
      'Peeling Qu√≠mico vs Tratamientos L√°ser'
    ],
    'tecnico': [
      'Par√°metros T√©cnicos del L√°ser Nd:YAG en Depilaci√≥n',
      'Protocolo de Seguridad en Radiofrecuencia Facial',
      'Tecnolog√≠a IPL: An√°lisis de Espectros de Luz',
      'Calibraci√≥n de Equipos de Alta Frecuencia',
      'Sistemas de Refrigeraci√≥n en Equipos Est√©ticos',
      'An√°lisis Comparativo de Tecnolog√≠as LED',
      'Especificaciones T√©cnicas del Dermapen',
      'Protocolos de Mantenimiento de Equipos L√°ser',
      'Configuraci√≥n de Par√°metros en HIFU',
      'Sistemas de Control de Calidad en Equipos M√©dicos'
    ]
  };
  
  res.json({
    success: true,
    suggestions: suggestions
  });
});

// Generar blog con IA (SISTEMA COMPLETO DE PRODUCCI√ìN)
app.post('/api/generate-blog', async (req, res) => {
  try {
    console.log('ü§ñ Iniciando generaci√≥n de blog...');
    console.log('üìä Request body:', JSON.stringify(req.body, null, 2));

    // Verificar API Key
    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({
        success: false,
        message: 'OPENAI_API_KEY no configurada',
        error: 'Variable de entorno faltante',
        endpoint: '/api/generate-blog'
      });
    }

    const { 
      blogType = 'medico-estetico', 
      topic = 'Tratamientos de medicina est√©tica',
      manual = false 
    } = req.body || {};

    console.log(`üìù Generando blog - Tipo: ${blogType}, Tema: ${topic}`);

    // Validar tipo de blog
    if (!['medico-estetico', 'tecnico'].includes(blogType)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Tipo de blog inv√°lido. Usar: medico-estetico o tecnico'
      });
    }

    // Obtener prompts
    const selectedPrompts = BLOG_PROMPTS[blogType];
    console.log('‚úÖ Prompts seleccionados');

    // Generar contenido con OpenAI
    console.log('üîÑ Llamando a OpenAI GPT-4...');
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { 
          role: "system", 
          content: selectedPrompts.systemPrompt 
        },
        { 
          role: "user", 
          content: selectedPrompts.userPrompt(topic) 
        }
      ],
      max_tokens: 3000,
      temperature: 0.7
    });

    console.log('‚úÖ Respuesta recibida de OpenAI');

    const content = completion.choices[0].message.content;
    console.log(`üìè Contenido generado: ${content.length} caracteres`);

    // Procesar el contenido generado
    const title = extractTitle(content);
    const slug = generateSlug(title);
    const excerpt = generateExcerpt(content);
    const tags = generateTags(content, blogType);

    console.log(`üìå T√≠tulo: ${title}`);
    console.log(`üîó Slug: ${slug}`);

    // Crear estructura del blog
    const blogData = {
      id: `blog-${Date.now()}`,
      title: title,
      slug: slug,
      excerpt: excerpt,
      content: content,
      category: blogType,
      author: blogType === 'tecnico' ? 'BIOSKIN T√©cnico' : 'BIOSKIN M√©dico',
      publishedAt: new Date().toISOString(),
      readTime: Math.ceil(content.length / 1000), // Aproximado
      tags: tags,
      image: '', // Se a√±adir√° en el editor
      imagenPrincipal: '',
      imagenConclusion: '',
      featured: false,
      source: 'ai-generated-local'
    };

    console.log('‚úÖ Blog generado exitosamente');

    return res.json({
      success: true,
      blog: blogData,
      message: 'Blog generado exitosamente',
      stats: {
        words: content.split(' ').length,
        readTime: blogData.readTime,
        category: blogType,
        tokensUsed: completion.usage?.total_tokens || 0
      }
    });

  } catch (error) {
    console.error('‚ùå Error generando blog:', error);
    
    // Diagn√≥stico espec√≠fico del error
    let errorMessage = 'Error generando el blog';
    let errorDetails = error.message;

    if (error.code === 'invalid_api_key') {
      errorMessage = 'API Key de OpenAI inv√°lida';
      errorDetails = 'Verifica que tu API key sea correcta y tenga fondos disponibles';
    } else if (error.code === 'insufficient_quota') {
      errorMessage = 'Cuota de OpenAI agotada';
      errorDetails = 'Tu cuenta de OpenAI ha alcanzado el l√≠mite de uso';
    } else if (error.code === 'rate_limit_exceeded') {
      errorMessage = 'L√≠mite de velocidad excedido';
      errorDetails = 'Demasiadas solicitudes muy r√°pido, espera un momento';
    }

    return res.status(500).json({
      success: false,
      message: errorMessage,
      error: errorDetails,
      code: error.code || 'unknown_error',
      details: error.toString()
    });
  }
});

// Funci√≥n para mover im√°genes temporales al directorio correcto
async function moveTemporalImages(blogSlug) {
  try {
    const temporalDir = path.join(projectRoot, 'public', 'images', 'blog', 'temporal');
    const blogImagesDir = path.join(projectRoot, 'public', 'images', 'blog', blogSlug);
    
    if (await fs.pathExists(temporalDir)) {
      const temporalFiles = await fs.readdir(temporalDir);
      
      if (temporalFiles.length > 0) {
        console.log(`üîÑ Moviendo ${temporalFiles.length} im√°genes temporales a ${blogSlug}`);
        
        await fs.ensureDir(blogImagesDir);
        
        for (const file of temporalFiles) {
          const sourcePath = path.join(temporalDir, file);
          const targetPath = path.join(blogImagesDir, file);
          
          try {
            await fs.move(sourcePath, targetPath);
            console.log(`‚úÖ Movida: ${file} -> ${blogSlug}/`);
          } catch (moveError) {
            console.warn(`‚ö†Ô∏è Error moviendo ${file}:`, moveError.message);
          }
        }
        
        // Intentar eliminar directorio temporal si est√° vac√≠o
        try {
          const remainingFiles = await fs.readdir(temporalDir);
          if (remainingFiles.length === 0) {
            await fs.remove(temporalDir);
            console.log('üóëÔ∏è Directorio temporal limpiado');
          }
        } catch (cleanupError) {
          console.log('‚ö†Ô∏è No se pudo limpiar directorio temporal:', cleanupError.message);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Error moviendo im√°genes temporales:', error);
  }
}

// Guardar blog con estructura organizada
app.post('/api/save-blog', async (req, res) => {
  try {
    const { blogData } = req.body;
    
    if (!blogData || !blogData.slug) {
      return res.status(400).json({
        success: false,
        message: 'Datos del blog inv√°lidos'
      });
    }

    // Crear estructura de directorios para el blog
    const blogSlug = blogData.slug;
    const blogDir = path.join(blogsDir, blogSlug);
    const blogImagesDir = path.join(projectRoot, 'public', 'images', 'blog', blogSlug);

    // Asegurar que existen los directorios
    await fs.ensureDir(blogDir);
    await fs.ensureDir(blogImagesDir);

    // Mover im√°genes temporales si existen
    await moveTemporalImages(blogSlug);

    // Paths de archivos
    const blogFilePath = path.join(blogDir, 'index.json');
    const metadataFilePath = path.join(blogDir, 'metadata.json');

    // A√±adir metadatos de guardado
    const finalBlogData = {
      ...blogData,
      savedAt: new Date().toISOString(),
      source: 'local-generator',
      structure: 'organized',
      paths: {
        blog: `src/data/blogs/${blogSlug}/index.json`,
        images: `public/images/blog/${blogSlug}/`,
        metadata: `src/data/blogs/${blogSlug}/metadata.json`
      }
    };

    // Crear metadatos separados para facilitar la gesti√≥n
    const metadata = {
      id: finalBlogData.id,
      title: finalBlogData.title,
      slug: finalBlogData.slug,
      category: finalBlogData.category,
      author: finalBlogData.author,
      publishedAt: finalBlogData.publishedAt,
      savedAt: finalBlogData.savedAt,
      readTime: finalBlogData.readTime,
      tags: finalBlogData.tags,
      featured: finalBlogData.featured || false,
      source: finalBlogData.source,
      structure: finalBlogData.structure,
      paths: finalBlogData.paths,
      images: finalBlogData.images || [],
      status: 'draft' // Estados: draft, ready, published
    };

    // Guardar archivos
    await fs.writeFile(blogFilePath, JSON.stringify(finalBlogData, null, 2), 'utf8');
    await fs.writeFile(metadataFilePath, JSON.stringify(metadata, null, 2), 'utf8');

    // Actualizar √≠ndice de blogs
    await updateBlogsIndex();

    console.log(`üíæ Blog guardado con estructura organizada: ${blogSlug}`);
    console.log(`üìÅ Directorio: ${blogDir}`);
    console.log(`üñºÔ∏è Im√°genes: ${blogImagesDir}`);

    res.json({
      success: true,
      message: 'Blog guardado exitosamente con estructura organizada',
      slug: blogSlug,
      paths: {
        blog: blogFilePath,
        images: blogImagesDir,
        metadata: metadataFilePath
      },
      structure: 'organized'
    });

  } catch (error) {
    console.error('‚ùå Error guardando blog:', error);
    res.status(500).json({
      success: false,
      message: 'Error guardando el blog',
      error: error.message
    });
  }
});

// Funci√≥n para actualizar el √≠ndice de blogs
async function updateBlogsIndex() {
  try {
    const indexPath = path.join(blogsDir, 'index.json');
    const blogs = [];
    
    // Leer todos los blogs organizados
    if (await fs.pathExists(blogsDir)) {
      const entries = await fs.readdir(blogsDir);
      
      for (const entry of entries) {
        const entryPath = path.join(blogsDir, entry);
        const stat = await fs.stat(entryPath);
        
        if (stat.isDirectory()) {
          // Es un blog organizado
          const metadataPath = path.join(entryPath, 'metadata.json');
          if (await fs.pathExists(metadataPath)) {
            try {
              const metadata = JSON.parse(await fs.readFile(metadataPath, 'utf8'));
              blogs.push(metadata);
            } catch (err) {
              console.warn(`‚ö†Ô∏è Error leyendo metadata de ${entry}:`, err.message);
            }
          }
        } else if (entry.endsWith('.json') && entry !== 'index.json') {
          // Es un blog legacy (archivo individual)
          try {
            const content = await fs.readFile(entryPath, 'utf8');
            const blogData = JSON.parse(content);
            blogs.push({
              ...blogData,
              structure: 'legacy',
              source: blogData.source || 'legacy'
            });
          } catch (err) {
            console.warn(`‚ö†Ô∏è Error leyendo blog legacy ${entry}:`, err.message);
          }
        }
      }
    }

    // Ordenar por fecha de publicaci√≥n
    blogs.sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));

    // Guardar √≠ndice actualizado
    const indexData = {
      lastUpdated: new Date().toISOString(),
      total: blogs.length,
      organized: blogs.filter(b => b.structure === 'organized').length,
      legacy: blogs.filter(b => b.structure === 'legacy').length,
      blogs: blogs
    };

    await fs.writeFile(indexPath, JSON.stringify(indexData, null, 2), 'utf8');
    console.log(`üìá √çndice de blogs actualizado: ${blogs.length} blogs`);

  } catch (error) {
    console.error('‚ùå Error actualizando √≠ndice de blogs:', error);
  }
}

// Desplegar blog con estructura organizada
app.post('/api/deploy-blog', async (req, res) => {
  try {
    const { blogSlug, commitMessage } = req.body;
    
    if (!blogSlug) {
      return res.status(400).json({
        success: false,
        message: 'El slug del blog es requerido'
      });
    }

    let blogPath, blogData;

    // Buscar en estructura organizada
    const organizedPath = path.join(blogsDir, blogSlug, 'index.json');
    if (await fs.pathExists(organizedPath)) {
      blogPath = organizedPath;
      const content = await fs.readFile(organizedPath, 'utf8');
      blogData = JSON.parse(content);
    } else {
      // Buscar en archivos legacy
      const legacyPath = path.join(blogsDir, `${blogSlug}.json`);
      if (await fs.pathExists(legacyPath)) {
        blogPath = legacyPath;
        const content = await fs.readFile(legacyPath, 'utf8');
        blogData = JSON.parse(content);
      } else {
        return res.status(404).json({
          success: false,
          message: 'El blog no existe'
        });
      }
    }

    // Despliegue con Git
    const git = simpleGit(projectRoot);

    console.log(`üîÑ Iniciando despliegue para blog: ${blogSlug}`);

    // A√±adir todos los archivos del blog
    if (blogData.structure === 'organized') {
      // Blog organizado: a√±adir directorio completo
      const relativeBlogDir = path.relative(projectRoot, path.dirname(blogPath)).replace(/\\/g, '/');
      console.log(`üìÅ A√±adiendo directorio del blog: ${relativeBlogDir}`);
      await git.add(`${relativeBlogDir}/`);
      
      // Tambi√©n a√±adir im√°genes si existen
      const blogImagesDir = path.join(projectRoot, 'public', 'images', 'blog', blogSlug);
      if (await fs.pathExists(blogImagesDir)) {
        // Verificar que hay archivos en el directorio
        const imageFiles = await fs.readdir(blogImagesDir);
        if (imageFiles.length > 0) {
          const relativeImagesDir = path.relative(projectRoot, blogImagesDir).replace(/\\/g, '/');
          console.log(`üñºÔ∏è A√±adiendo im√°genes: ${relativeImagesDir}/ (${imageFiles.length} archivos)`);
          await git.add(`${relativeImagesDir}/`);
        } else {
          console.log(`‚ö†Ô∏è Directorio de im√°genes vac√≠o: ${blogImagesDir}`);
        }
      } else {
        console.log(`‚ö†Ô∏è Directorio de im√°genes no existe: ${blogImagesDir}`);
      }
    } else {
      // Blog legacy: a√±adir solo el archivo
      const relativePath = path.relative(projectRoot, blogPath).replace(/\\/g, '/');
      console.log(`üìÑ A√±adiendo archivo legacy: ${relativePath}`);
      await git.add(relativePath);
    }

    // A√±adir √≠ndice actualizado
    const indexPath = path.join(blogsDir, 'index.json');
    if (await fs.pathExists(indexPath)) {
      const relativeIndexPath = path.relative(projectRoot, indexPath).replace(/\\/g, '/');
      console.log(`üìá A√±adiendo √≠ndice: ${relativeIndexPath}`);
      await git.add(relativeIndexPath);
    }

    // Commit
    const message = commitMessage || `üìù Nuevo blog organizado: ${blogData.title}`;
    const commitResult = await git.commit(message);

    // Push
    await git.push('origin', 'main');

    // Actualizar estado del blog a publicado
    if (blogData.structure === 'organized') {
      const metadataPath = path.join(path.dirname(blogPath), 'metadata.json');
      if (await fs.pathExists(metadataPath)) {
        const metadata = JSON.parse(await fs.readFile(metadataPath, 'utf8'));
        metadata.status = 'published';
        metadata.publishedAt = new Date().toISOString();
        await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2), 'utf8');
      }
    }

    console.log(`üöÄ Blog desplegado con estructura organizada: ${blogSlug}`);

    res.json({
      success: true,
      message: 'Blog desplegado exitosamente',
      details: {
        slug: blogSlug,
        title: blogData.title,
        commit: commitResult.commit,
        commitMessage: message,
        structure: blogData.structure || 'legacy',
        imagesIncluded: blogData.structure === 'organized'
      }
    });

  } catch (error) {
    console.error('‚ùå Error desplegando blog:', error);
    res.status(500).json({
      success: false,
      message: 'Error desplegando el blog',
      error: error.message
    });
  }
});

// Lista de blogs guardados con estructura mejorada
app.get('/api/saved-blogs', async (req, res) => {
  try {
    const indexPath = path.join(blogsDir, 'index.json');
    
    if (await fs.pathExists(indexPath)) {
      // Si existe el √≠ndice, usarlo
      const indexContent = await fs.readFile(indexPath, 'utf8');
      const indexData = JSON.parse(indexContent);
      
      res.json({
        success: true,
        blogs: indexData.blogs,
        metadata: {
          total: indexData.total,
          organized: indexData.organized,
          legacy: indexData.legacy,
          lastUpdated: indexData.lastUpdated
        }
      });
    } else {
      // Si no existe √≠ndice, crear uno nuevo escaneando directorios
      await updateBlogsIndex();
      
      // Leer el √≠ndice reci√©n creado
      if (await fs.pathExists(indexPath)) {
        const indexContent = await fs.readFile(indexPath, 'utf8');
        const indexData = JSON.parse(indexContent);
        
        res.json({
          success: true,
          blogs: indexData.blogs,
          metadata: {
            total: indexData.total,
            organized: indexData.organized,
            legacy: indexData.legacy,
            lastUpdated: indexData.lastUpdated
          }
        });
      } else {
        res.json({
          success: true,
          blogs: [],
          metadata: {
            total: 0,
            organized: 0,
            legacy: 0,
            lastUpdated: new Date().toISOString()
          }
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Error obteniendo blogs:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo la lista de blogs',
      error: error.message
    });
  }
});

// Endpoint para obtener un blog espec√≠fico
app.get('/api/blog/:slug', async (req, res) => {
  try {
    const { slug } = req.params;
    
    // Buscar primero en estructura organizada
    const organizedPath = path.join(blogsDir, slug, 'index.json');
    if (await fs.pathExists(organizedPath)) {
      const content = await fs.readFile(organizedPath, 'utf8');
      const blogData = JSON.parse(content);
      
      // Tambi√©n obtener metadata
      const metadataPath = path.join(blogsDir, slug, 'metadata.json');
      let metadata = {};
      if (await fs.pathExists(metadataPath)) {
        const metadataContent = await fs.readFile(metadataPath, 'utf8');
        metadata = JSON.parse(metadataContent);
      }
      
      return res.json({
        success: true,
        blog: blogData,
        metadata: metadata,
        structure: 'organized'
      });
    }
    
    // Si no est√° en estructura organizada, buscar en archivos legacy
    const legacyPath = path.join(blogsDir, `${slug}.json`);
    if (await fs.pathExists(legacyPath)) {
      const content = await fs.readFile(legacyPath, 'utf8');
      const blogData = JSON.parse(content);
      
      return res.json({
        success: true,
        blog: blogData,
        metadata: blogData,
        structure: 'legacy'
      });
    }
    
    // Blog no encontrado
    res.status(404).json({
      success: false,
      message: 'Blog no encontrado',
      slug: slug
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo blog:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo el blog',
      error: error.message
    });
  }
});

// Endpoint para subir im√°genes organizadas por blog
app.post('/api/upload-image', (req, res) => {
  console.log('üì® Petici√≥n recibida en /api/upload-image');
  console.log('üìã Headers:', req.headers);
  
  upload.single('image')(req, res, async (err) => {
    if (err) {
      console.error('‚ùå Error de multer:', err);
      return res.status(400).json({
        success: false,
        message: 'Error procesando el archivo',
        error: err.message
      });
    }

    try {
      if (!req.file) {
        console.log('‚ö†Ô∏è No se recibi√≥ ning√∫n archivo');
        console.log('üìã req.body completo:', req.body);
        return res.status(400).json({
          success: false,
          message: 'No se subi√≥ ning√∫n archivo'
        });
      }

      const blogSlug = req.body.blogSlug || 'temporal';
      const filename = req.file.filename;
      const imageUrl = `/images/blog/${blogSlug}/${filename}`;

      console.log(`üñºÔ∏è Imagen subida exitosamente: ${filename}`);
      console.log(`üìÇ Blog slug usado: ${blogSlug}`);
      console.log(`üìÇ Ruta del archivo f√≠sico: ${req.file.path}`);
      console.log(`üîó URL de la imagen: ${imageUrl}`);

      // Verificar que el archivo realmente se guard√≥
      if (await fs.pathExists(req.file.path)) {
        console.log(`‚úÖ Archivo confirmado en: ${req.file.path}`);
      } else {
        console.error(`‚ùå Archivo NO encontrado en: ${req.file.path}`);
      }

      // Si el blog existe, actualizar su lista de im√°genes
      if (blogSlug !== 'temporal') {
        await updateBlogImages(blogSlug, imageUrl, filename);
      } else {
        console.log('‚ö†Ô∏è Imagen subida a carpeta temporal porque no se proporcion√≥ blogSlug v√°lido');
      }

      res.json({
        success: true,
        message: 'Imagen subida correctamente',
        imageUrl: imageUrl,
        filename: filename,
        blogSlug: blogSlug,
        fullPath: req.file.path,
        debug: {
          originalBlogSlug: req.body.blogSlug,
          usedBlogSlug: blogSlug,
          destination: req.file.destination
        }
      });

    } catch (error) {
      console.error('‚ùå Error procesando imagen:', error);
      res.status(500).json({
        success: false,
        message: 'Error procesando la imagen',
        error: error.message
      });
    }
  });
});

// Funci√≥n para actualizar las im√°genes de un blog
async function updateBlogImages(blogSlug, imageUrl, filename) {
  try {
    const blogDir = path.join(blogsDir, blogSlug);
    const metadataPath = path.join(blogDir, 'metadata.json');
    
    if (await fs.pathExists(metadataPath)) {
      const metadata = JSON.parse(await fs.readFile(metadataPath, 'utf8'));
      
      // A√±adir imagen a la lista
      if (!metadata.images) {
        metadata.images = [];
      }
      
      const imageInfo = {
        url: imageUrl,
        filename: filename,
        uploadedAt: new Date().toISOString(),
        type: determineImageType(filename)
      };
      
      metadata.images.push(imageInfo);
      
      // Guardar metadata actualizado
      await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2), 'utf8');
      
      console.log(`üì∏ Imagen a√±adida al blog ${blogSlug}: ${filename}`);
    }
  } catch (error) {
    console.error('‚ùå Error actualizando im√°genes del blog:', error);
  }
}

// Funci√≥n para determinar el tipo de imagen
function determineImageType(filename) {
  const lower = filename.toLowerCase();
  if (lower.includes('principal') || lower.includes('main') || lower.includes('hero')) {
    return 'principal';
  } else if (lower.includes('conclusion') || lower.includes('final') || lower.includes('end')) {
    return 'conclusion';
  } else if (lower.includes('antes') || lower.includes('before')) {
    return 'antes';
  } else if (lower.includes('despues') || lower.includes('after')) {
    return 'despues';
  } else {
    return 'contenido';
  }
}

// Validar API Key
app.get('/api/validate-openai', async (req, res) => {
  try {
    if (!process.env.OPENAI_API_KEY) {
      return res.json({
        valid: false,
        message: 'API Key no configurada'
      });
    }

    // Hacer una llamada simple para validar
    const response = await openai.models.list();

    res.json({
      valid: true,
      message: 'API Key v√°lida',
      models: response.data.length
    });

  } catch (error) {
    console.error('‚ùå Error validando API Key:', error);
    res.json({
      valid: false,
      message: 'API Key inv√°lida o error de conexi√≥n',
      error: error.message
    });
  }
});

// Manejo de errores
app.use((error, req, res, next) => {
  console.error('Error del servidor:', error);
  res.status(500).json({
    success: false,
    message: 'Error interno del servidor',
    error: error.message
  });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`‚úÖ Servidor iniciado correctamente en puerto ${PORT}`);
  console.log(`üîë OpenAI configurado: ${process.env.OPENAI_API_KEY ? 'S√ç' : 'NO'}`);
  console.log(`üìÅ Directorio blogs: ${blogsDir}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
});

module.exports = app;